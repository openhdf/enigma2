#!/bin/sh

prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@

if [ -x @bindir@/showiframe ]; then
	killall -9 showiframe; sleep 1
	if [ -f @sysconfdir@/enigma2/bootlogo.mvi ]; then
		echo found @sysconfdir@/enigma2/bootlogo.mvi
		@bindir@/showiframe @sysconfdir@/enigma2/bootlogo.mvi
	elif [ -f @datadir@/bootlogo.mvi ]; then
		echo found @datadir@/bootlogo.mvi
		@bindir@/showiframe @datadir@/bootlogo.mvi
	fi
fi

# workaround for corrupt ssl files
if [ ! "$(grep config.misc.firstrun /etc/enigma2/settings)" == "config.misc.firstrun=false" ]; then
	rm -rf /etc/enigma2/cert.pem &
	rm -rf /etc/enigma2/key.pem &
fi

# update NTP time if NTP Time Enabled
if [ "$(grep config.misc.SyncTimeUsing /etc/enigma2/settings)" == "config.misc.SyncTimeUsing=1" ]; then
	/usr/bin/ntpdate -s -u pool.ntp.org &
fi

# check multiquickbutton keymap
FILE=/usr/lib/enigma2/python/Plugins/Extensions/MultiQuickButton/keymap.xml
if test -s $FILE; then
	echo "$FILE looks good"
	else
	rm -f /usr/lib/enigma2/python/Plugins/Extensions/MultiQuickButton/keymap.xml
	cp /usr/lib/enigma2/python/Plugins/Extensions/HDF-Toolbox/scripts/mqb_keymap.xml $FILE
	echo "$FILE restored from backup"
fi

# hook to execute scripts always before enigma2 start
if [ -x @bindir@/enigma2_pre_start.sh ]; then
	@bindir@/enigma2_pre_start.sh
fi

if [ -f /usr/lib/libssl.so.0.9.8 ]; then
	echo "libssl symlink found"
else
	ln -s /usr/lib/libssl.so.1.0.0 /usr/lib/libssl.so.0.9.8
fi
	
if [ -f /lib/libcrypto.so.0.9.8 ]; then
	echo "libcrypto symlink found"
else
	ln -s /lib/libcrypto.so.1.0.0 /lib/libcrypto.so.0.9.8
fi

if [ -d /home/root ]; then
	cd /home/root
fi

if [ -e /proc/stb/info/hwmodel ]; then
    stbcheck=`cat /proc/stb/info/hwmodel | cut -c1-8`
    if [ $stbcheck == "optimuss" ]; then
        string=`mount | grep 'sda1' | cut -d " " -f3`
        if [ -e $string/sat-soft/settings.sh ]; then
            chmod 755 $string/sat-soft/settings.sh
            $string/sat-soft/settings.sh
        fi
    fi
fi

# check if media/net directory exists
if [ -d /media/net ]; then
	echo "/media/net found"
else
	mkdir /media/net
fi

# check for settings files
if [ -f @sysconfdir@/enigma2/settings ]; then
	echo "@sysconfdir@/enigma2/settings found"
else
	cp @datadir@/enigma2/defaults/* @sysconfdir@/enigma2/
fi

# check for sundtek tuner helper lib
if [ -e /opt/lib/libmediaclient.so ]; then
	LIBS="/opt/lib/libmediaclient.so /usr/lib/libopen.so.0.0.0"
else
	LIBS="/usr/lib/libopen.so.0.0.0"
fi

#check for specific pagecache helper lib
if [ -e /usr/lib/libpagecache.so ]; then
	LIBS="$LIBS /usr/lib/libpagecache.so"
fi

#check for receiver specific passthrough helper lib
if [ -e @libdir@/libpassthrough.so ]; then
	LIBS="$LIBS @libdir@/libpassthrough.so"
fi

if [ ! -e /etc/enigma2/settings ]; then
	touch /etc/enigma2/settings
fi

sync

if [ "$(grep config.crash.enabledebug /etc/enigma2/settings)" == "config.crash.enabledebug=true" ]; then
	RANDOMIZE1970=''
	time=`date +%Y` ;
	if [ "$time" = 1970 ]; then
		RANDOMIZE1970="$(strings /dev/urandom | grep -o '[[:alnum:]]' | head -n 5 | tr -d '\n')"
	fi
	if [ "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" != "" -a -d "$(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')" ]; then
		LD_PRELOAD=$LIBS @bindir@/enigma2 &> $(grep config.crash.debug_path= /etc/enigma2/settings | sed 's/config.crash.debug_path=//g')Enigma2-debug-$(date +%Y%m%d_%H-%M-%S)$RANDOMIZE1970.log
	else
		LD_PRELOAD=$LIBS @bindir@/enigma2 &> /home/root/logs/Enigma2-debug-$(date +%Y%m%d_%H-%M-%S)$RANDOMIZE1970.log
	fi
else
	LD_PRELOAD=$LIBS @bindir@/enigma2
fi

# enigma2 exit codes:
#
# 1 - halt
# 2 - reboot
# 3 - restart enigma
#
# >128 signal

ret=$?
case $ret in
	1)
		/sbin/halt
		;;
	2)
		/sbin/reboot
		;;
	3)
		rm -fR /home/root/.gstreamer-0.10
		rm -f /tmp/.listen.camd.socket.ignore
		;;
	4)
		/sbin/rmmod lcd
		/usr/sbin/fpupgrade --upgrade 2>&1 | tee /home/root/fpupgrade.log
		sleep 1;
		/sbin/rmmod fp
		/sbin/modprobe fp
		/sbin/reboot
		;;
	42)
		python /usr/lib/enigma2/python/upgrade.pyo
		;;
	43)
		init 1
		;;		
	44)
		# little hack but it will be fixed soon in drivers
		if [ "$(cat /proc/stb/info/boxtype)" == 'ini-9000de' ]; then
			/usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi && echo fpupload > /proc/vfd && sleep 7 && cat /tmp/micom.bin > /dev/mcu && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi && sleep 200000
		elif [ "$(cat /proc/stb/info/boxtype)" == 'ini-9000ru' ]; then
			/usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi && echo fpupload > /proc/vfd && sleep 7 && cat /tmp/micom.bin > /dev/mcu && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi && sleep 200000
		elif [ "$(cat /proc/stb/info/boxtype)" == 'ini-8000am' ]; then
			/usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi && echo fpupload > /proc/vfd && sleep 7 && cat /tmp/micom.bin > /dev/mcu && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi && sleep 200000
		else
			/usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/bin/fbclear && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/wait.mvi && echo fpupload > /dev/dbox/oled0 && sleep 7 && cat /tmp/micom.bin > /dev/mcu && /usr/bin/showiframe /usr/lib/enigma2/python/Plugins/SystemPlugins/MICOMUpgrade/reboot.mvi && sleep 200000
		fi
		;;
	45)
		echo "    " > /dev/lcd0
		/usr/bin/gigablue_wol
		;;		
	*)
		rm -f /tmp/.listen.camd.socket.ignore
		;;
esac
